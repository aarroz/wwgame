[gd_scene load_steps=10 format=2]

[ext_resource path="res://assets/models/Tiles/prototype_materials/wall_prototype.material" type="Material" id=1]
[ext_resource path="res://assets/simple_fpsplayer/Player.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

# This preloads a scene with the dissolve shader applied to a ColorRec node.
onready var Effect_teleport = preload(\"res://assets/scripts/shaders/ColorRect_dissolve.tscn\")

# Sets the variables of the two players we are switching between, and their respective cameras.
onready var Play_1 = $Player
onready var Cam_1 = $Player/rotation_helper/Camera
onready var Play_2 = $Player2
onready var Cam_2 = $Player2/rotation_helper/Camera

# Called when the node enters the scene tree for the first time.
func _ready():
	#Set Player 1 as default
	Cam_2.set_current(0)
	Cam_1.set_current(1)
	my_pause(Play_2)
	my_resume(Play_1)

func teleport():
	# This provides the teleport screen effect. In order to make the switching less disorienting.
	var fx1 = Effect_teleport.instance()
	var scene_root = get_tree().root.get_children()[0]
	scene_root.add_child(fx1)

func my_pause(node : Node) -> void:
	node.set_physics_process(false)
	node.set_process(false)
	node.set_process_input(false)
	# disable input processes
	# disable physics somehow

func my_resume(node : Node) -> void:
	# resumes these processes for the selected node
	node.set_physics_process(true)
	node.set_process(true)
	node.set_process_input(true)

func _input(event):
	# Binds the switching action to keys 1 and 2.
	if Input.is_key_pressed(KEY_1) and Cam_2.is_current():
		teleport()
		yield(get_tree().create_timer(0.5), \"timeout\")
		Cam_2.set_current(0)
		Cam_1.set_current(1)
		my_pause(Play_2)
		my_resume(Play_1)
	if Input.is_key_pressed(KEY_2) and Cam_1.is_current():
		teleport()
		yield(get_tree().create_timer(0.5), \"timeout\")
		Cam_1.set_current(0)
		Cam_2.set_current(1)
		my_pause(Play_1)
		my_resume(Play_2)
"

[sub_resource type="CylinderShape" id=5]
radius = 1.5
height = 0.5

[sub_resource type="GDScript" id=6]
script/source = "extends Spatial

onready var action = $AnimationPlayer

func door_open():
	action.play(\"door_open\")

func door_close():
	action.play_backwards(\"door_open\")


func _on_button_1_body_entered(body):
	if body.is_in_group(\"Player\"):
		door_open()

func _on_button_1_body_exited(body):
	if body.is_in_group(\"Player\"):
		door_close()
"

[sub_resource type="CubeMesh" id=7]
size = Vector3( 0.5, 6, 4 )

[sub_resource type="BoxShape" id=2]
extents = Vector3( 0.5, 3, 2 )

[sub_resource type="Animation" id=3]
resource_name = "door_close"
tracks/0/type = "bezier"
tracks/0/path = NodePath("door:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("door:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -1, -0.25, 0, 0.25, 0, -1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("door:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( -4, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}

[sub_resource type="Animation" id=4]
tracks/0/type = "bezier"
tracks/0/path = NodePath("door:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("door:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -1, -0.25, 0, 0.25, 0, -1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("door:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, -4, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}

[node name="level_parallel_actions" type="Spatial"]
script = SubResource( 1 )

[node name="starting" type="CSGCombiner" parent="."]
material_override = ExtResource( 1 )
use_collision = true

[node name="room" type="CSGBox" parent="starting"]
width = 20.0
height = 10.0
depth = 20.0

[node name="doorway" type="CSGBox" parent="starting"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, -1, 0 )
operation = 2
width = 20.0
height = 8.0
depth = 8.0

[node name="Player" parent="." instance=ExtResource( 2 )]

[node name="Player2" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -14, 8, -15 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.866025, 0.353553, -0.353553, 0, 0.707107, 0.707107, 0.5, -0.612372, 0.612372, 0, 10, 0 )

[node name="ally" type="CSGCombiner" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -48, 0, 0 )
use_collision = true

[node name="CSGBox" type="CSGBox" parent="ally"]
width = 76.0
height = 10.0
depth = 20.0

[node name="CSGCylinder" type="CSGCylinder" parent="ally"]
transform = Transform( -1.62921e-07, -1, 0, 0.955942, -1.55743e-07, 0.293557, -0.293557, 4.78264e-08, 0.955942, 0, 5, 0 )
operation = 2
radius = 10.0
height = 76.1
sides = 12

[node name="second_room" type="CSGCombiner" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -48, 9, -15 )
use_collision = true

[node name="CSGBox2" type="CSGBox" parent="second_room"]
width = 76.0
height = 9.0
depth = 9.0

[node name="CSGBox" type="CSGBox" parent="second_room"]
operation = 2
width = 75.0
height = 8.0
depth = 8.0

[node name="CSGBox3" type="CSGBox" parent="second_room"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4 )
operation = 2
width = 75.0
height = 4.0

[node name="button_door" type="Spatial" parent="second_room"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 29, -3, 2 )

[node name="CSGCombiner" type="CSGCombiner" parent="second_room/button_door"]
use_in_baked_light = true
use_collision = true

[node name="button" type="CSGCylinder" parent="second_room/button_door/CSGCombiner"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.668211, 0 )
height = 0.25
sides = 16

[node name="base" type="CSGCylinder" parent="second_room/button_door/CSGCombiner"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )
radius = 1.5
height = 0.5
sides = 16

[node name="button_1" type="Area" parent="second_room/button_door"]

[node name="CollisionShape" type="CollisionShape" parent="second_room/button_door/button_1"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.779329, 0 )
shape = SubResource( 5 )

[node name="Door1" type="Spatial" parent="second_room"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 22, -9, 15 )
script = SubResource( 6 )

[node name="doorway" type="CSGCombiner" parent="second_room/Door1"]

[node name="CSGBox" type="CSGBox" parent="second_room/Door1/doorway"]
width = 1.0
height = 10.0
depth = 20.0

[node name="CSGBox2" type="CSGBox" parent="second_room/Door1/doorway"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.03178, 0 )
operation = 2
height = 6.0
depth = 4.0

[node name="door" type="StaticBody" parent="second_room/Door1"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )

[node name="MeshInstance" type="MeshInstance" parent="second_room/Door1/door"]
mesh = SubResource( 7 )
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="second_room/Door1/door"]
shape = SubResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="second_room/Door1"]
anims/door_close = SubResource( 3 )
anims/door_open = SubResource( 4 )
[connection signal="body_entered" from="second_room/button_door/button_1" to="second_room/Door1" method="_on_button_1_body_entered"]
[connection signal="body_exited" from="second_room/button_door/button_1" to="second_room/Door1" method="_on_button_1_body_exited"]
